% FOR iE-DEEC PROTOCOL
clear all
xm=100;
ym=100;
sink.x=0.5*xm;
sink.y=0.5*ym;
n=100
P=0.1;
Eo=0.5;
Echeck=Eo;
E_tx=50*0.000000001;
E_rx=50*0.000000001;
E_fs=10*0.000000000001;
E_fs1=E_fs/10;
E_mp=0.0013*0.000000000001;
E_mp1=E_mp/10;
temp_i=50;
temp_f=200;
Eda=5*0.000000001;
a=1.5;
max_rounds=4000
do=sqrt(E_fs/E_mp);
do1=sqrt(E_fs1/E_mp);
Et=0;
h=100;
s=2;
m=0.5;
mo=0.4;
b=3;
normal_n=n*(1-m);
advance_n=n*m*(1-mo);
super_n=n*m*mo;
for j=1:1:super_n
NODE(j).xd=rand(1,1)*xm;
XR(j)=NODE(j).xd;
NODE(j).yd=rand(1,1)*ym;
YR(j)=NODE(j).yd;
NODE(j).G=0;
NODE(j).E=Eo*(1+b);
E(j)= NODE(j).E;
Et=Et+E(j);
NODE(j).type='N';
end
th1=super_n+advance_n;
for j=super_n:1:th1
NODE(j).xd=rand(1,1)*xm;
XR(j)=NODE(j).xd;
NODE(j).yd=rand(1,1)*ym;
YR(j)=NODE(j).yd;
12
NODE(j).G=0;
NODE(j).E=Eo*(1+a);
E(j)= NODE(j).E;
Et=Et+E(j);
NODE(j).type='N';
end
for i=th1:1:n
NODE(i).xd=rand(1,1)*xm;
XR(i)=NODE(i).xd;
NODE(i).yd=rand(1,1)*ym;
YR(i)=NODE(i).yd;
NODE(i).G=0;
NODE(i).E=Eo;
E(i)= NODE(i).E;
Et=Et+E(i);
NODE(i).type='N';
end
d1=0.765*xm/2;
K=sqrt(0.5*n*do/pi)*xm/d1^2;
d2=xm/sqrt(2*pi*K);
Er=4000*(2*n*E_tx+n*Eda+K*E_mp*d1^4+n*E_fs*d2^2);
NODE(n+1).xd=sink.x;
NODE(n+1).yd=sink.y;
NO_OF_CHs=0;
NO_OF_cluster=1;
flag_first_dead=0;
flag_tenth_dead=0;
flag_all_dead=0;
dead=0;
first_dead=0;
tenth_dead=0;
all_dead=0;
alive=n;
NO_OF_packets_to_BS=0;
NO_OF_packets_to_CH=0;
for rounds=0:1:max_rounds
rounds
NO_of_packets_to_BS_per_round=0;
cv = temp_i + (temp_f-temp_i).*rand(1,1);
if(mod(rounds, round(1/P) )==0)
for i=1:1:n
NODE(i).G=0;
NODE(i).cl=0;
end
end
Ea=Et*(1-rounds/max_rounds)/n;
dead=0;
for i=1:1:n
if (NODE(i).E<=0)
dead=dead+1;
if (dead==1)
if(flag_first_dead==0)
13
first_dead=rounds;
flag_first_dead=1;
end
end
if(dead==0.1*n)
if(flag_tenth_dead==0)
tenth_dead=rounds;
flag_tenth_dead=1;
end
end
if(dead==n)
if(flag_all_dead==0)
all_dead=rounds;
flag_all_dead=1;
end
end
end
if NODE(i).E>0
NODE(i).type='N';
end
end
TOTAL.DEAD(rounds+1)=dead;
TOTAL.ALIVE(rounds+1)=alive-dead;
NO_OF_CHs=0;
NO_OF_cluster=1;
for i=1:1:n
if Ea>0
if (NODE(i).E<= Eo)
p(i)=P*E(i)/(1+m*(a+mo*b))*Ea;
end
if (NODE(i).E<=Eo*(1+a))
p(i)=P*(1+a)*E(i)/(1+m*(a+mo*b))*Ea;
end
if (NODE(i).E<=Eo*(1+b))
p(i)=P*(1+b)*E(i)*d2/(1+m*(a+mo*b))*Ea*d1;
end
if(NODE(i).E>0)
temp_rand=rand;
if ( (NODE(i).G)<=0)
if(temp_rand<= (p(i)/(1-(p(i)*(rounds*mod(1,p(i)))))))
NO_OF_CHs=NO_OF_CHs+1;
NO_OF_packets_to_BS=NO_OF_packets_to_BS+1;
NO_OF_PACKETS_TO_BS(rounds+1)=NO_OF_packets_to_BS;
NODE(i).type='C';
NODE(i).G=round(1/p(i))-1;
C(NO_OF_cluster).xd=NODE(i).xd;
C(NO_OF_cluster).yd=NODE(i).yd;
distance=sqrt( (NODE(i).xd-(NODE(n+1).xd) )^2 + (NODE(i).yd-
(NODE(n+1).yd) )^2 );
C(NO_OF_cluster).distance=distance;
C(NO_OF_cluster).id=i;
X(NO_OF_cluster)=NODE(i).xd;
Y(NO_OF_cluster)=NODE(i).yd;
14
NO_OF_cluster=NO_OF_cluster+1;
distance;
if (distance>do)
NODE(i).E=NODE(i).E- ( (E_tx+Eda)*(4000) + E_mp*4000*(
distance*distance*distance*distance ));
end
if (distance<=do)
NODE(i).E=NODE(i).E- ( (E_tx+Eda)*(4000) + E_fs*4000*( distance *
distance ));
end
end
end
end
end
end
TOTAL.NO_OF_CHS(rounds+1)=NO_OF_CHs;
for i=1:1:n
if ( NODE(i).type=='N' && NODE(i).E>0 )
if(NO_OF_cluster-1>=1)
minimum_distance=sqrt( (NODE(i).xd-NODE(n+1).xd)^2 + (NODE(i).ydNODE(n+1).yd)^2 );
minimum_distance_cluster=0;
for c=1:1:NO_OF_cluster-1
temp=min(minimum_distance,sqrt( (NODE(i).xd-C(c).xd)^2 + (NODE(i).ydC(c).yd)^2 ) );
if ( temp<minimum_distance )
minimum_distance=temp;
minimum_distance_cluster=c;
end
end
if(minimum_distance_cluster~=0)
min_dis;
if (minimum_distance>do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_mp*4000*( minimum_distance *
minimum_distance * minimum_distance * minimum_distance));
end
if (minimum_distance<=do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_fs*4000*( minimum_distance *
minimum_distance));
end
NODE(C(minimum_distance_cluster).id).E =
NODE(C(minimum_distance_cluster).id).E- ( (E_rx + Eda)*4000 );
NO_OF_packets_to_CH=NO_OF_packets_to_CH+1;
else
min_dis;
if (minimum_distance>do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_mp*4000*( minimum_distance *
minimum_distance * minimum_distance * minimum_distance));
end
if (minimum_distance<=do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_fs*4000*( minimum_distance *
minimum_distance));
15
end
NO_OF_packets_to_BS=NO_OF_packets_to_BS+1;
end
NODE(i).minimum_distance=minimum_distance;
NODE(i).minimum_distance_cluster=minimum_distance_cluster;
else
minimum_distance=sqrt( (NODE(i).xd-NODE(n+1).xd)^2 + (NODE(i).ydNODE(n+1).yd)^2 );
if (minimum_distance>do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_mp*4000*( minimum_distance *
minimum_distance * minimum_distance * minimum_distance));
end
if (minimum_distance<=do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_fs*4000*( minimum_distance *
minimum_distance));
end
NO_OF_packets_to_BS=NO_OF_packets_to_BS+1;
NO_of_packets_to_BS_per_round=NO_of_packets_to_BS_per_round+1;
sv=cv;
end
end
end
TOTAL.NO_OF_PACKETS_TO_CH(rounds+1)=NO_OF_packets_to_CH;
TOTAL.NO_OF_PACKETS_TO_BS(rounds+1)=NO_OF_packets_to_BS;
TOTAL.NO_of_packets_to_BS_per_round(rounds+1)=NO_of_packets_to_BS_per_ro
und;
TOTAL.THROUGHPUT(rounds+1)=TOTAL.NO_OF_PACKETS_TO_CH(rounds+1)+TOTAL.NO_
OF_PACKETS_TO_BS(rounds+1)
En=0;
for i=1:n
if NODE(i).E<=0
continue;
end
En=En+NODE(i).E;
end
ENERGY(rounds+1)=En;
TOTAL.ENERGY(rounds+1)=En;
En
end
first_dead
tenth_dead
all_dead
TOTAL.DEAD(rounds+1)
TOTAL.ALIVE(rounds+1)
TOTAL.NO_OF_PACKETS_TO_CH(rounds+1)
TOTAL.NO_OF_PACKETS_TO_BS(rounds+1)
TOTAL.NO_OF_CHS(rounds+1)
rounds=0:4000;
figure(1);
plot(rounds,TOTAL.DEAD);
xlabel('Number of Rounds')
16
ylabel('Dead Nodes')
hold on;
figure(2);
plot(rounds,TOTAL.ALIVE);
xlabel('Number of Rounds')
ylabel('Alive Nodes')
hold on;
figure(3);
plot(rounds,TOTAL.NO_OF_PACKETS_TO_BS);
xlabel('Number of Rounds')
ylabel('packets sent to BS')
hold on;
figure(4);
plot(rounds,TOTAL.THROUGHPUT(rounds+1));
xlabel('Number of rounds');
ylabel('Throughput');
hold on;
figure(5);
plot(rounds,TOTAL.NO_of_packets_to_BS_per_round(rounds+1));
xlabel('Number of rounds');
ylabel('Packets to BS per round');
hold on;
figure(6);
plot(rounds,TOTAL.ENERGY(rounds+1));
xlabel('Number of rounds');
ylabel('Energy');
hold on;
% FOR iE-DEEC PROTOCOL
clear all
xm=100;
ym=100;
sink.x=0.5*xm;
sink.y=0.5*ym;
n=100
P=0.1;
Eo=0.5;
Echeck=Eo;
E_tx=50*0.000000001;
E_rx=50*0.000000001;
E_fs=10*0.000000000001;
E_fs1=E_fs/10;
E_mp=0.0013*0.000000000001;
E_mp1=E_mp/10;
temp_i=50;
temp_f=200;
Eda=5*0.000000001;
a=1.5;
17
max_rounds=4000
do=sqrt(E_fs/E_mp);
do1=sqrt(E_fs1/E_mp);
Et=0;
h=100;
s=2;
m=0.5;
mo=0.4;
b=3;
normal_n=n*(1-m);
advance_n=n*m*(1-mo);
super_n=n*m*mo;
for j=1:1:super_n
NODE(j).xd=rand(1,1)*xm;
XR(j)=NODE(j).xd;
NODE(j).yd=rand(1,1)*ym;
YR(j)=NODE(j).yd;
NODE(j).G=0;
NODE(j).E=Eo*(1+b);
E(j)= NODE(j).E;
Et=Et+E(j);
NODE(j).type='N';
end
th1=super_n+advance_n;
for j=super_n:1:th1
NODE(j).xd=rand(1,1)*xm;
XR(j)=NODE(j).xd;
NODE(j).yd=rand(1,1)*ym;
YR(j)=NODE(j).yd;
NODE(j).G=0;
NODE(j).E=Eo*(1+a);
E(j)= NODE(j).E;
Et=Et+E(j);
NODE(j).type='N';
end
for i=th1:1:n
NODE(i).xd=rand(1,1)*xm;
XR(i)=NODE(i).xd;
NODE(i).yd=rand(1,1)*ym;
YR(i)=NODE(i).yd;
NODE(i).G=0;
NODE(i).E=Eo;
E(i)= NODE(i).E;
Et=Et+E(i);
NODE(i).type='N';
end
d1=0.765*xm/2;
K=sqrt(0.5*n*do/pi)*xm/d1^2;
d2=xm/sqrt(2*pi*K);
Er=4000*(2*n*E_tx+n*Eda+K*E_mp*d1^4+n*E_fs*d2^2);
NODE(n+1).xd=sink.x;
NODE(n+1).yd=sink.y;
NO_OF_CHs=0;
18
NO_OF_cluster=1;
flag_first_dead=0;
flag_tenth_dead=0;
flag_all_dead=0;
dead=0;
first_dead=0;
tenth_dead=0;
all_dead=0;
alive=n;
NO_OF_packets_to_BS=0;
NO_OF_packets_to_CH=0;
for rounds=0:1:max_rounds
rounds
NO_of_packets_to_BS_per_round=0;
cv = temp_i + (temp_f-temp_i).*rand(1,1);
if(mod(rounds, round(1/P) )==0)
for i=1:1:n
NODE(i).G=0;
NODE(i).cl=0;
end
end
Ea=Et*(1-rounds/max_rounds)/n;
dead=0;
for i=1:1:n
if (NODE(i).E<=0)
dead=dead+1;
if (dead==1)
if(flag_first_dead==0)
first_dead=rounds;
flag_first_dead=1;
end
end
if(dead==0.1*n)
if(flag_tenth_dead==0)
tenth_dead=rounds;
flag_tenth_dead=1;
end
end
if(dead==n)
if(flag_all_dead==0)
all_dead=rounds;
flag_all_dead=1;
end
end
end
if NODE(i).E>0
NODE(i).type='N';
end
end
TOTAL.DEAD(rounds+1)=dead;
TOTAL.ALIVE(rounds+1)=alive-dead;
NO_OF_CHs=0;
NO_OF_cluster=1;
19
for i=1:1:n
if Ea>0
if (NODE(i).E<= Eo)
p(i)=P*E(i)/(1+m*(a+mo*b))*Ea;
end
if (NODE(i).E<=Eo*(1+a))
p(i)=P*(1+a)*E(i)/(1+m*(a+mo*b))*Ea;
end
if (NODE(i).E<=Eo*(1+b))
p(i)=P*(1+b)*E(i)/(1+m*(a+mo*b))*Ea;
end
if(NODE(i).E>0)
temp_rand=rand;
if ( (NODE(i).G)<=0)
if(temp_rand<= (p(i)/(1-(p(i)*(rounds*mod(1,p(i)))))))
NO_OF_CHs=NO_OF_CHs+1;
NO_OF_packets_to_BS=NO_OF_packets_to_BS+1;
NO_OF_PACKETS_TO_BS(rounds+1)=NO_OF_packets_to_BS;
NODE(i).type='C';
NODE(i).G=round(1/p(i))-1;
C(NO_OF_cluster).xd=NODE(i).xd;
C(NO_OF_cluster).yd=NODE(i).yd;
distance=sqrt( (NODE(i).xd-(NODE(n+1).xd) )^2 + (NODE(i).yd-
(NODE(n+1).yd) )^2 );
C(NO_OF_cluster).distance=distance;
C(NO_OF_cluster).id=i;
X(NO_OF_cluster)=NODE(i).xd;
Y(NO_OF_cluster)=NODE(i).yd;
NO_OF_cluster=NO_OF_cluster+1;
distance;
if (distance>do)
NODE(i).E=NODE(i).E- ( (E_tx+Eda)*(4000) + E_mp*4000*(
distance*distance*distance*distance ));
end
if (distance<=do)
NODE(i).E=NODE(i).E- ( (E_tx+Eda)*(4000) + E_fs*4000*( distance *
distance ));
end
end
end
end
end
end
TOTAL.NO_OF_CHS(rounds+1)=NO_OF_CHs;
for i=1:1:n
if ( NODE(i).type=='N' && NODE(i).E>0 )
if(NO_OF_cluster-1>=1)
minimum_distance=sqrt( (NODE(i).xd-NODE(n+1).xd)^2 + (NODE(i).ydNODE(n+1).yd)^2 );
minimum_distance_cluster=0;
for c=1:1:NO_OF_cluster-1
temp=min(minimum_distance,sqrt( (NODE(i).xd-C(c).xd)^2 + (NODE(i).ydC(c).yd)^2 ) );
20
if ( temp<minimum_distance )
minimum_distance=temp;
minimum_distance_cluster=c;
end
end
if(minimum_distance_cluster~=0)
minimum_distance;
if (minimum_distance>do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_mp*4000*( minimum_distance *
minimum_distance * minimum_distance * minimum_distance));
end
if (minimum_distance<=do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_fs*4000*( minimum_distance *
minimum_distance));
end
NODE(C(minimum_distance_cluster).id).E =
NODE(C(minimum_distance_cluster).id).E- ( (E_rx + Eda)*4000 );
NO_OF_packets_to_CH=NO_OF_packets_to_CH+1;
else
minimum_distance;
if (minimum_distance>do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_mp*4000*( minimum_distance *
minimum_distance * minimum_distance * minimum_distance));
end
if (minimum_distance<=do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_fs*4000*( minimum_distance *
minimum_distance));
end
NO_OF_packets_to_BS=NO_OF_packets_to_BS+1;
end
NODE(i).minimum_distance=minimum_distance;
NODE(i).minimum_distance_cluster=minimum_distance_cluster;
else
minimum_distance=sqrt( (NODE(i).xd-NODE(n+1).xd)^2 + (NODE(i).ydNODE(n+1).yd)^2 );
if (minimum_distance>do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_mp*4000*( minimum_distance *
minimum_distance * minimum_distance * minimum_distance));
end
if (minimum_distance<=do)
NODE(i).E=NODE(i).E- ( E_tx*(4000) + E_fs*4000*( minimum_distance *
minimum_distance));
end
NO_OF_packets_to_BS=NO_OF_packets_to_BS+1;
NO_of_packets_to_BS_per_round=NO_of_packets_to_BS_per_round+1;
sv=cv;
end
end
end
TOTAL.NO_OF_PACKETS_TO_CH(rounds+1)=NO_OF_packets_to_CH;
TOTAL.NO_OF_PACKETS_TO_BS(rounds+1)=NO_OF_packets_to_BS;
TOTAL.NO_of_packets_to_BS_per_round(rounds+1)=NO_of_packets_to_BS_per_ro
und;
21
TOTAL.THROUGHPUT(rounds+1)=TOTAL.NO_OF_PACKETS_TO_CH(rounds+1)+TOTAL.NO_
OF_PACKETS_TO_BS(rounds+1)
En=0;
for i=1:n
if NODE(i).E<=0
continue;
end
En=En+NODE(i).E;
end
ENERGY(rounds+1)=En;
TOTAL.ENERGY(rounds+1)=En;
En
end
first_dead
tenth_dead
all_dead
TOTAL.DEAD(rounds+1)
TOTAL.ALIVE(rounds+1)
TOTAL.NO_OF_PACKETS_TO_CH(rounds+1)
TOTAL.NO_OF_PACKETS_TO_BS(rounds+1)
TOTAL.NO_OF_CHS(rounds+1)
rounds=0:4000;
figure(1);
plot(rounds,TOTAL.DEAD);
xlabel('Number of Rounds')
ylabel('Dead Nodes')
legend('iE-DEEC','EDEEC');
hold on;
figure(2);
plot(rounds,TOTAL.ALIVE);
xlabel('Number of Rounds')
ylabel('Alive Nodes')
legend('iE-DEEC','EDEEC');
hold on;
figure(3);
plot(rounds,TOTAL.NO_OF_PACKETS_TO_BS);
xlabel('Number of Rounds')
ylabel('packets sent to BS')
legend('iE-DEEC','EDEEC');
hold on;
figure(4);
plot(rounds,TOTAL.THROUGHPUT(rounds+1));
xlabel('Number of rounds');
ylabel('Throughput');
legend('iE-DEEC','EDEEC');
hold on;
figure(5);
plot(rounds,TOTAL.NO_of_packets_to_BS_per_round(rounds+1));
xlabel('Number of rounds');
ylabel('Packets to BS per round');
legend('iE-DEEC','EDEEC');
hold on;
figure(6);
22
plot(rounds,TOTAL.ENERGY(rounds+1));
xlabel('Number of rounds');
ylabel('Energy');
legend('iE-DEEC','EDEEC');
hold on;
